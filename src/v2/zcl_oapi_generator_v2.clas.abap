CLASS zcl_oapi_generator_v2 DEFINITION
  PUBLIC
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
      BEGIN OF ty_input,
        clas_icf_serv TYPE c LENGTH 30,
        clas_icf_impl TYPE c LENGTH 30,
        clas_client   TYPE c LENGTH 30,
        intf          TYPE c LENGTH 30,
        destination   TYPE c LENGTH 30,
        add_noparsing TYPE abap_bool,
        openapi_json  TYPE string,
      END OF ty_input .
    TYPES:
      BEGIN OF ty_result,
        clas_icf_serv TYPE string,
        clas_icf_impl TYPE string,
        clas_client   TYPE string,
        intf          TYPE string,
      END OF ty_result .

    METHODS run
      IMPORTING
        !is_input        TYPE ty_input
      RETURNING
        VALUE(rs_result) TYPE ty_result .
  PROTECTED SECTION.
  PRIVATE SECTION.
    DATA ms_specification TYPE zif_oapi_specification_v3=>ty_specification.
    DATA ms_input TYPE ty_input.

    METHODS build_clas_icf_serv
      RETURNING VALUE(rv_abap) TYPE string.

    METHODS build_clas_icf_impl
      RETURNING VALUE(rv_abap) TYPE string.

    METHODS build_clas_client
      RETURNING VALUE(rv_abap) TYPE string.

    METHODS build_intf
      RETURNING VALUE(rv_abap) TYPE string.

    METHODS find_input_parameters
      IMPORTING
        is_operation    TYPE zif_oapi_specification_v3=>ty_operation
        iv_no_body_type TYPE abap_bool DEFAULT abap_false
      RETURNING
        VALUE(rv_abap)  TYPE string.

    TYPES: BEGIN OF ty_returning,
             abap TYPE string,
             type TYPE string,
           END OF ty_returning.
    METHODS find_returning_parameter
      IMPORTING
        is_operation        TYPE zif_oapi_specification_v3=>ty_operation
      RETURNING
        VALUE(rs_returning) TYPE ty_returning.

    METHODS find_schema
      IMPORTING
        iv_name          TYPE string
      RETURNING
        VALUE(rs_schema) TYPE zif_oapi_specification_v3=>ty_component_schema.

    METHODS build_clas_client_response
      IMPORTING
        is_response      TYPE zif_oapi_specification_v3=>ty_response
      RETURNING
        VALUE(rv_result) TYPE string.

    METHODS build_clas_client_body
      IMPORTING
        is_operation     TYPE zif_oapi_specification_v3=>ty_operation
      RETURNING
        VALUE(rv_result) TYPE string.

ENDCLASS.



CLASS zcl_oapi_generator_v2 IMPLEMENTATION.


  METHOD build_clas_client.
    DATA ls_operation LIKE LINE OF ms_specification-operations.
    DATA lv_parameters TYPE string.
    DATA lv_exit_class TYPE c LENGTH 30.

    lv_exit_class = ms_input-clas_client(25) && '_EXIT'.

    "Declaration
    rv_abap = |CLASS { ms_input-clas_client } DEFINITION PUBLIC.\n| &&
      |* Auto generated by https://github.com/abap-openapi/abap-openapi\n| &&
      |  PUBLIC SECTION.\n| &&
      |    INTERFACES { ms_input-intf }.\n| &&
      |    METHODS constructor\n| &&
      |      RAISING\n| &&
      |        /iwbep/cx_gateway.\n| &&
      |    METHODS get_http_client\n| &&
      |      RETURNING VALUE(ri_client) TYPE REF TO if_http_client.\n| &&
      |    METHODS get_exit_object\n| &&
      |      RETURNING VALUE(ri_exit) TYPE REF TO zif_oapi_exit.\n| &&
      |  PROTECTED SECTION.\n| &&
      |    DATA mi_client TYPE REF TO if_http_client.\n| &&
      |    DATA mi_exit TYPE REF TO zif_oapi_exit.\n| &&
      |ENDCLASS.\n\n|.

    "Impementation
    "General
    rv_abap = rv_abap &&
    |CLASS { ms_input-clas_client } IMPLEMENTATION.\n| &&
    |  METHOD get_http_client.\n| &&
    |     ri_client = mi_client.\n| &&
    |  ENDMETHOD.\n\n| &&
    |  METHOD get_exit_object.\n| &&
    |     ri_exit = mi_exit.\n| &&
    |  ENDMETHOD.\n\n| &&
    |  METHOD constructor.\n| &&
    |    cl_http_client=>create_by_destination(\n| &&
    |        EXPORTING\n| &&
    |          destination              = '{ ms_input-destination }'\n| &&
    |        IMPORTING\n| &&
    |          client                   = mi_client\n| &&
    |        EXCEPTIONS\n| &&
    |          argument_not_found       = 1\n| &&
    |          destination_not_found    = 2\n| &&
    |          destination_no_authority = 3\n| &&
    |          plugin_not_active        = 4\n| &&
    |          internal_error           = 5\n| &&
    |          OTHERS                   = 6 ).\n| &&
    |    IF sy-subrc <> 0.\n| &&
    |      RAISE EXCEPTION TYPE /iwbep/cx_gateway\n| &&
    |        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno.\n| &&
    |    ENDIF.\n| &&
    |\n| &&
    |    DATA(lv_class_name) = '{ lv_exit_class }'.\n| &&
    |    TRY.\n| &&
    |        CREATE OBJECT mi_exit TYPE (lv_class_name).\n| &&
    |        mi_exit->constructor_exit(\n| &&
    |           ii_client      = mi_client ).\n| &&
    |      CATCH cx_sy_create_object_error ##NO_HANDLER.\n| &&
    |    ENDTRY.\n| &&
    |  ENDMETHOD.\n\n|.


    LOOP AT ms_specification-operations INTO ls_operation.

      "Parameters
      CLEAR lv_parameters.

      IF ls_operation-parameters IS NOT INITIAL.
        LOOP AT ls_operation-parameters ASSIGNING FIELD-SYMBOL(<ls_parameters>).
          CASE <ls_parameters>-in.

            WHEN 'path'.
              lv_parameters = <ls_parameters>-abap_name.

            WHEN 'query'.
              IF sy-tabix = 1.
                lv_parameters = |'?' && |.
              ELSE.
                lv_parameters = lv_parameters && | && '&' &&|.
              ENDIF.

              lv_parameters = lv_parameters && |'{ <ls_parameters>-name }=' && { <ls_parameters>-abap_name }|.
            WHEN 'header'.
              "todo
            WHEN 'cookie'.
              "todo

          ENDCASE.

        ENDLOOP.
      ELSE.
        lv_parameters = |''|.
      ENDIF.

      rv_abap = rv_abap &&
        |  METHOD { ms_input-intf }~{ ls_operation-abap_name }.\n| &&
        |\n| &&
        |    DATA:lv_path            TYPE string,\n| &&
        |         lv_parameters      TYPE string,\n| &&
        |         lv_uri             TYPE string,\n| &&
        |         lv_method          TYPE string,\n| &&
        |         lv_operation_id     TYPE string,\n| &&
        |         lv_body_data       TYPE xstring,\n| &&
        |         lv_response_string TYPE string,\n| &&
        |         lv_code            TYPE i,\n| &&
        |         lv_reason          TYPE string.\n| &&
        |\n| &&
        |    lv_path = '{ ls_operation-path }'.\n| &&
        |    lv_parameters = { lv_parameters }.\n| &&
        |    lv_uri = lv_path && lv_parameters.\n| &&
        |    lv_method = '{ to_upper( ls_operation-method ) }'.\n| &&
        |    lv_operation_id = '{ ls_operation-operation_id }'.\n| &&
        |\n| &&
        |    mi_client->request->set_method( lv_method ).\n| &&
        |    cl_http_utility=>set_request_uri(\n| &&
        |       request = mi_client->request\n| &&
        |       uri = lv_uri ).\n|.

      "Body
      rv_abap = rv_abap && build_clas_client_body( ls_operation ).

      "send
      rv_abap = rv_abap &&
      |    IF mi_exit IS BOUND.\n| &&
      |       TRY.\n| &&
      |           mi_exit->before_send(\n| &&
      |               iv_path           = lv_path\n| &&
      |               iv_operation_id   = lv_operation_id\n| &&
      |               iv_method         = lv_method\n| &&
      |               ii_client         = mi_client ).\n| &&
      |         CATCH cx_sy_ref_is_initial cx_sy_dyn_call_illegal_method ##NO_HANDLER.\n| &&
      |       ENDTRY.\n| &&
      |    ENDIF.\n\n| &&
      |       mi_client->send(\n| &&
      |           EXCEPTIONS\n| &&
      |               http_communication_failure = 1\n| &&
      |               http_invalid_state         = 2\n| &&
      |               http_processing_failed     = 3\n| &&
      |               http_invalid_timeout       = 4\n| &&
      |               OTHERS                     = 5 ).\n| &&
      |    IF sy-subrc <> 0.\n| &&
      |      RAISE EXCEPTION TYPE /iwbep/cx_gateway\n| &&
      |        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno.\n| &&
      |    ENDIF.\n\n|.

      "receive
      rv_abap = rv_abap &&
      |    mi_client->receive(\n| &&
      |      EXCEPTIONS\n| &&
      |        http_communication_failure = 1\n| &&
      |        http_invalid_state         = 2\n| &&
      |        http_processing_failed     = 3\n| &&
      |        OTHERS                     = 4 ).\n| &&
      |    IF sy-subrc <> 0.\n| &&
      |      RAISE EXCEPTION TYPE /iwbep/cx_gateway\n| &&
      |          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno.\n| &&
      |    ENDIF.\n| &&
      |\n| &&
      |    IF mi_exit IS BOUND.\n| &&
      |       TRY.\n| &&
      |           mi_exit->after_receive(\n| &&
      |               iv_path           = lv_path\n| &&
      |               iv_operation_id   = lv_operation_id\n| &&
      |               iv_method         = lv_method\n| &&
      |               ii_client         = mi_client ).\n| &&
      |         CATCH cx_sy_ref_is_initial cx_sy_dyn_call_illegal_method ##NO_HANDLER.\n| &&
      |       ENDTRY.\n| &&
      |    ENDIF.\n\n|.

      "Response
      rv_abap = rv_abap &&
      |    mi_client->response->get_status(\n| &&
      |      IMPORTING\n| &&
      |          code   = lv_code\n| &&
      |          reason = lv_reason ).\n\n|.

      IF ls_operation-responses IS NOT INITIAL.
        rv_abap = rv_abap &&
        |    CASE lv_code.\n|.

        LOOP AT ls_operation-responses ASSIGNING FIELD-SYMBOL(<ls_responses>).
          rv_abap = rv_abap &&
          |       WHEN { <ls_responses>-code }.\n| &&
          build_clas_client_response( <ls_responses> ).
        ENDLOOP.

        rv_abap = rv_abap &&
        |       WHEN OTHERS.\n| &&
        |            RAISE EXCEPTION TYPE /iwbep/cx_gateway\n| &&
        |             EXPORTING http_status_code = CONV #( lv_code ).\n| &&
        |    ENDCASE.\n|.
      ENDIF.

      rv_abap = rv_abap &&
        |  ENDMETHOD.\n\n|.


      IF ms_input-add_noparsing = abap_true.

        rv_abap = rv_abap &&
            |  METHOD { ms_input-intf }~{ ls_operation-abap_name }_d.\n| &&
            |\n| &&
            |    DATA:lv_path               TYPE string,\n| &&
            |         lv_parameters         TYPE string,\n| &&
            |         lv_uri                TYPE string,\n| &&
            |         lv_method             TYPE string,\n| &&
            |         lv_operation_id       TYPE string,\n| &&
            |         lv_body_data          TYPE xstring,\n| &&
            |         lv_code               TYPE i,\n| &&
            |         lv_reason             TYPE string.\n| &&
            |\n| &&
            |    lv_path = '{ ls_operation-path }'.\n| &&
            |    lv_parameters = { lv_parameters }.\n| &&
            |    lv_uri = lv_path && lv_parameters.\n| &&
            |    lv_method = '{ to_upper( ls_operation-method ) }'.\n| &&
            |    lv_operation_id = '{ ls_operation-operation_id }'.\n| &&
            |\n| &&
            |    mi_client->request->set_method( lv_method ).\n| &&
            |    cl_http_utility=>set_request_uri(\n| &&
            |       request = mi_client->request\n| &&
            |       uri = lv_uri ).\n\n|.

        "body
        IF ls_operation-body_schema_ref IS NOT INITIAL.
          rv_abap = rv_abap &&
            |    mi_client->request->set_header_field( name = 'Content-Type' value = 'application/json'  ).\n\n| &&
            |    lv_body_data = cl_abap_codepage=>convert_to( source = body ).\n| &&
            |    mi_client->request->set_data( lv_body_data ).\n\n|.
        ENDIF.


        "send
        rv_abap = rv_abap &&
            |    IF mi_exit IS BOUND.\n| &&
            |       TRY.\n| &&
            |           mi_exit->before_send(\n| &&
            |               iv_path           = lv_path\n| &&
            |               iv_operation_id   = lv_operation_id\n| &&
            |               iv_method         = lv_method\n| &&
            |               ii_client         = mi_client ).\n| &&
            |         CATCH cx_sy_ref_is_initial cx_sy_dyn_call_illegal_method ##NO_HANDLER.\n| &&
            |       ENDTRY.\n| &&
            |    ENDIF.\n\n| &&
            |       mi_client->send(\n| &&
            |           EXCEPTIONS\n| &&
            |               http_communication_failure = 1\n| &&
            |               http_invalid_state         = 2\n| &&
            |               http_processing_failed     = 3\n| &&
            |               http_invalid_timeout       = 4\n| &&
            |               OTHERS                     = 5 ).\n| &&
            |    IF sy-subrc <> 0.\n| &&
            |      RAISE EXCEPTION TYPE /iwbep/cx_gateway\n| &&
            |        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno.\n| &&
            |    ENDIF.\n| &&
            |\n| &&
            "receive
            |    mi_client->receive(\n| &&
            |      EXCEPTIONS\n| &&
            |        http_communication_failure = 1\n| &&
            |        http_invalid_state         = 2\n| &&
            |        http_processing_failed     = 3\n| &&
            |        OTHERS                     = 4 ).\n| &&
            |    IF sy-subrc <> 0.\n| &&
            |      RAISE EXCEPTION TYPE /iwbep/cx_gateway\n| &&
            |          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno.\n| &&
            |    ENDIF.\n| &&
            |\n| &&
            |    IF mi_exit IS BOUND.\n| &&
            |       TRY.\n| &&
            |           mi_exit->after_receive(\n| &&
            |               iv_path           = lv_path\n| &&
            |               iv_operation_id   = lv_operation_id\n| &&
            |               iv_method         = lv_method\n| &&
            |               ii_client         = mi_client ).\n| &&
            |         CATCH cx_sy_ref_is_initial cx_sy_dyn_call_illegal_method ##NO_HANDLER.\n| &&
            |       ENDTRY.\n| &&
            |    ENDIF.\n| &&
            |\n| &&
            "Response
            |    mi_client->response->get_status(\n| &&
            |      IMPORTING\n| &&
            |          code   = lv_code\n| &&
            |          reason = lv_reason ).\n\n|.

        IF ls_operation-responses IS NOT INITIAL.
          rv_abap = rv_abap &&
              |    CASE lv_code.\n|.

          LOOP AT ls_operation-responses ASSIGNING <ls_responses>.
            rv_abap = rv_abap &&
                |       WHEN { <ls_responses>-code }.\n| &&
                |           return = mi_client->response->get_cdata( ).\n|.
          ENDLOOP.

          rv_abap = rv_abap &&
              |       WHEN OTHERS.\n| &&
              |            RAISE EXCEPTION TYPE /iwbep/cx_gateway\n| &&
              |             EXPORTING http_status_code = CONV #( lv_code ).\n| &&
              |    ENDCASE.\n|.
        ENDIF.

        rv_abap = rv_abap &&
            |  ENDMETHOD.\n\n|.
      ENDIF.

    ENDLOOP.

    rv_abap = rv_abap && |ENDCLASS.|.
  ENDMETHOD.

  METHOD build_clas_client_body.
    IF is_operation-body_schema_ref IS INITIAL.
      RETURN.
    ENDIF.

    rv_result =
    |    mi_client->request->set_header_field( name = 'Content-Type' value = 'application/json'  ).\n\n| &&
    |    IF mi_exit IS BOUND.\n| &&
    |      TRY.\n| &&
    |          lv_body_data = mi_exit->parse_body_to_data(\n| &&
    |                             EXPORTING\n| &&
    |                               iv_path         = lv_path\n| &&
    |                               iv_operation_id = lv_operation_id\n| &&
    |                               iv_method       = lv_method\n| &&
    |                               ii_client       = mi_client\n| &&
    |                               i_body          = body ).\n| &&
    |        CATCH cx_sy_ref_is_initial cx_sy_dyn_call_illegal_method ##NO_HANDLER.\n| &&
    |      ENDTRY.\n| &&
    |    ELSE.\n| &&
    |       lv_body_data = cl_abap_codepage=>convert_to( source = /ui2/cl_json=>serialize( data = body ) ).\n| &&
    |    ENDIF.\n| &&
    |\n| &&
    |    mi_client->request->set_data( lv_body_data ).\n|.

  ENDMETHOD.

  METHOD build_clas_client_response.
    IF is_response-content IS INITIAL.
      rv_result =  |" todo: no content only code\n|.
      RETURN.
    ENDIF.
    IF lines( is_response-content ) > 1.
      rv_result =  |" todo: multiple response\n|.
      RETURN.
    ENDIF.

    DATA(lo_response_name) = NEW zcl_oapi_response_name( ).
    DATA(lv_response_name) = lo_response_name->generate_response_name(
                                  iv_content_type = is_response-content[ 1 ]-type
                                  iv_code         = is_response-code ).
    rv_result =
    |    IF mi_exit IS BOUND.\n| &&
    |      TRY.\n| &&
    |          mi_exit->parse_response_to_abap(\n| &&
    |            EXPORTING\n| &&
    |              iv_path          = lv_path\n| &&
    |              iv_operation_id  = lv_operation_id\n| &&
    |              iv_method        = lv_method\n| &&
    |              ii_client        = mi_client\n| &&
    |            CHANGING\n| &&
    |              c_data    = return-{ lv_response_name } ).\n| &&
    |        CATCH cx_sy_ref_is_initial cx_sy_dyn_call_illegal_method ##NO_HANDLER.\n| &&
    |      ENDTRY.\n| &&
    |    ELSE.\n| &&
    |      lv_response_string = mi_client->response->get_cdata( ).\n| &&
    |      /ui2/cl_json=>deserialize(\n| &&
    |          EXPORTING\n| &&
    |              json = lv_response_string\n| &&
    |          CHANGING\n| &&
    |              data = return-{ lv_response_name } ).\n| &&
    |    ENDIF.\n|.

  ENDMETHOD.


  METHOD build_clas_icf_impl.
    DATA ls_operation LIKE LINE OF ms_specification-operations.

    rv_abap = |CLASS { ms_input-clas_icf_impl } DEFINITION PUBLIC.\n| &&
      |  PUBLIC SECTION.\n| &&
      |    INTERFACES { ms_input-intf }.\n| &&
      |ENDCLASS.\n\n| &&
      |CLASS { ms_input-clas_icf_impl } IMPLEMENTATION.\n\n|.

    LOOP AT ms_specification-operations INTO ls_operation.
      rv_abap = rv_abap &&
        |  METHOD { ms_input-intf }~{ ls_operation-abap_name }.\n| &&
        |* Add implementation logic here\n| &&
        |  ENDMETHOD.\n\n|.
    ENDLOOP.

    rv_abap = rv_abap && |ENDCLASS.|.
  ENDMETHOD.


  METHOD build_clas_icf_serv.
    DATA ls_operation  LIKE LINE OF ms_specification-operations.
    DATA lv_parameters TYPE string.
    DATA lv_typename   TYPE string.
    DATA lv_post       TYPE string.
    DATA lv_pre        TYPE string.
    DATA ls_response   LIKE LINE OF ls_operation-responses.
    DATA ls_content    LIKE LINE OF ls_response-content.
    DATA ls_parameter  LIKE LINE OF ls_operation-parameters.
    DATA lo_response_name TYPE REF TO zcl_oapi_response_name.
    DATA lv_response_name TYPE string.
    DATA lv_code TYPE string.

    CREATE OBJECT lo_response_name.

    rv_abap = |CLASS { ms_input-clas_icf_serv } DEFINITION PUBLIC.\n| &&
      |* Auto generated by https://github.com/abap-openapi/abap-openapi\n| &&
      |  PUBLIC SECTION.\n| &&
      |    INTERFACES if_http_extension.\n| &&
      |  PRIVATE SECTION.\n|.

    rv_abap = rv_abap &&
      |ENDCLASS.\n\n| &&
      |CLASS { ms_input-clas_icf_serv } IMPLEMENTATION.\n|.

    rv_abap = rv_abap &&
      |  METHOD if_http_extension~handle_request.\n| &&
      |    DATA li_handler TYPE REF TO { ms_input-intf }.\n| &&
      |    DATA lv_method  TYPE string.\n| &&
      |    DATA lv_path    TYPE string.\n\n| &&
      |    CREATE OBJECT li_handler TYPE { ms_input-clas_icf_impl }.\n| &&
      |    lv_path = server->request->get_header_field( '~path' ).\n| &&
      |    lv_method = server->request->get_method( ).\n\n|.
    LOOP AT ms_specification-operations INTO ls_operation.
      rv_abap = rv_abap &&
        |    TRY.\n| &&
        |        IF lv_path = '{ ls_operation-path }' AND lv_method = '{ to_upper( ls_operation-method ) }'.\n|.

      CLEAR lv_parameters.
      IF lines( ls_operation-parameters ) = 1 AND ls_operation-body_schema_ref IS INITIAL.
        lv_parameters = | server->request->get_form_field( '{ ls_parameter-name }' )|.
      ELSE.
        LOOP AT ls_operation-parameters INTO ls_parameter WHERE in = 'query'.
          lv_parameters = lv_parameters &&
            |\n            { ls_parameter-abap_name } = server->request->get_form_field( '{ ls_parameter-name }' )|.
        ENDLOOP.


        IF ls_operation-body_schema_ref IS NOT INITIAL.
          rv_abap = rv_abap &&
            |          DATA { ls_operation-abap_name  } TYPE { ms_input-intf }=>{ find_schema( ls_operation-body_schema_ref )-abap_name }.\n| &&
            |          /ui2/cl_json=>deserialize(\n| &&
            |            EXPORTING\n| &&
            |              json = server->request->get_cdata( )\n| &&
            |            CHANGING\n| &&
            |              data = { ls_operation-abap_name } ).\n|.
          lv_parameters = lv_parameters &&
            |\n            body = { ls_operation-abap_name }|.
        ENDIF.
      ENDIF.

      lv_typename = 'r_' && ls_operation-abap_name.

      CLEAR lv_post.
      LOOP AT ls_operation-responses INTO ls_response.
        IF ls_response-code = 'default'.
          READ TABLE ls_operation-responses WITH KEY code = '200' TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            lv_code = '400'.
          ELSE.
            lv_code = '200'.
          ENDIF.
        ELSE.
          lv_code = ls_response-code.
        ENDIF.
        LOOP AT ls_response-content INTO ls_content.

          lv_response_name = lo_response_name->generate_response_name( iv_content_type = ls_content-type
                                                                       iv_code         = ls_response-code ).

          lv_post = lv_post &&
            |          IF { lv_typename }-{ lv_response_name } IS NOT INITIAL.\n| &&
            |            server->response->set_content_type( '{ ls_content-type }' ).\n| &&
            |            server->response->set_cdata( /ui2/cl_json=>serialize( { lv_typename }-{ lv_response_name } ) ).\n| &&
            |            server->response->set_status( code = { lv_code } reason = '{ ls_response-description }' ).\n| &&
            |            RETURN.\n| &&
            |          ENDIF.\n|.
        ENDLOOP.
      ENDLOOP.
      IF lv_post IS NOT INITIAL.
        lv_pre =
          |          DATA { lv_typename } TYPE { ms_input-intf }=>{ lv_typename }.\n| &&
          |          { lv_typename } = |.
      ELSE.
        lv_pre =
          |          |.
        lv_post =
          |          RETURN.\n|.
      ENDIF.

      rv_abap = rv_abap &&
        lv_pre &&
        |li_handler->{ ls_operation-abap_name }({ lv_parameters } ).\n| &&
        lv_post &&
        |        ENDIF.\n| &&
        |      CATCH cx_static_check.\n| &&
        |        server->response->set_content_type( 'text/plain' ).\n| &&
        |        server->response->set_cdata( 'exception' ).\n| &&
        |        server->response->set_status( code = 500 reason = 'Error' ).\n| &&
        |    ENDTRY.\n|.
    ENDLOOP.
    rv_abap = rv_abap &&
      |\n| &&
      |    server->response->set_content_type( 'text/plain' ).\n| &&
      |    server->response->set_cdata( 'no handler found' ).\n| &&
      |    server->response->set_status( code = 500 reason = 'Error' ).\n| &&
      |  ENDMETHOD.\n| &&
      |ENDCLASS.|.
  ENDMETHOD.


  METHOD build_intf.
    DATA ls_operation LIKE LINE OF ms_specification-operations.
    DATA ls_returning TYPE ty_returning.
    DATA ls_component_schema LIKE LINE OF ms_specification-components-schemas.

    rv_abap = |INTERFACE { ms_input-intf } PUBLIC.\n| &&
      |* Auto generated by https://github.com/abap-openapi/abap-openapi\n\n|.

    LOOP AT ms_specification-components-schemas INTO ls_component_schema.
      rv_abap = rv_abap && |* { ls_component_schema-name }\n|.
      rv_abap = rv_abap && ls_component_schema-schema->build_type_definition2(
        iv_name          = ls_component_schema-abap_name
        is_specification = ms_specification ).
    ENDLOOP.

    rv_abap = rv_abap && |\n|.

    LOOP AT ms_specification-operations INTO ls_operation.

      ls_returning = find_returning_parameter( ls_operation ).

      rv_abap = rv_abap && ls_returning-type &&
        |  METHODS { ls_operation-abap_name }{
          find_input_parameters( ls_operation ) }{
          ls_returning-abap }\n    RAISING\n      /iwbep/cx_gateway.\n|.

      IF ms_input-add_noparsing = abap_true.
        rv_abap = rv_abap &&
          |  METHODS { ls_operation-abap_name }_d| &&
          find_input_parameters( is_operation = ls_operation iv_no_body_type = abap_true ) &&
          |\n| &&
          |   RETURNING\n      VALUE(return) TYPE string\n| &&
          |   RAISING\n      /iwbep/cx_gateway.\n|.
      ENDIF.
    ENDLOOP.
    rv_abap = rv_abap && |ENDINTERFACE.|.
  ENDMETHOD.


  METHOD find_input_parameters.
    DATA lt_list TYPE STANDARD TABLE OF string WITH DEFAULT KEY.
    DATA lv_str TYPE string.
    DATA ls_parameter LIKE LINE OF is_operation-parameters.
    DATA lv_simple_type TYPE string.

    LOOP AT is_operation-parameters INTO ls_parameter
    WHERE in = 'query'
    OR in = 'path'.
      IF ls_parameter-schema->type = 'array'.
        lv_simple_type = 'string_table'.
      ELSE.
        lv_simple_type = ls_parameter-schema->get_simple_type( ).
      ENDIF.
      lv_str = |      { ls_parameter-abap_name } TYPE { lv_simple_type }|.
      IF ls_parameter-required = abap_false.
        lv_str = lv_str && | OPTIONAL|.
      ENDIF.
      APPEND lv_str TO lt_list.
    ENDLOOP.

    IF is_operation-body_schema_ref IS NOT INITIAL.
      IF iv_no_body_type = abap_true.
        lv_str = |      body TYPE string|.
      ELSE.
        lv_str = |      body TYPE { find_schema( is_operation-body_schema_ref )-abap_name }|.
      ENDIF.
      APPEND lv_str TO lt_list.
    ENDIF.

    rv_abap = concat_lines_of( table = lt_list sep = |\n| ).

    IF rv_abap IS NOT INITIAL.
      rv_abap = |\n    IMPORTING\n{ rv_abap }|.
    ENDIF.
  ENDMETHOD.

  METHOD find_returning_parameter.
    DATA ls_response LIKE LINE OF is_operation-responses.
    DATA ls_content LIKE LINE OF ls_response-content.
    DATA lv_typename TYPE char30.
    DATA lo_response_name TYPE REF TO zcl_oapi_response_name.
    DATA lv_response_name TYPE string.
    DATA lv_returning_type TYPE string.

    CREATE OBJECT lo_response_name.

    lv_typename = 'r_' && is_operation-abap_name.

    LOOP AT is_operation-responses INTO ls_response.
      LOOP AT ls_response-content INTO ls_content.
        lv_response_name = lo_response_name->generate_response_name( iv_content_type = ls_content-type
                                                                     iv_code         = ls_response-code ).
        IF ls_content-schema_ref = space.
          lv_returning_type = ls_content-schema->type.
        ELSE.
          lv_returning_type = find_schema( ls_content-schema_ref )-abap_name.
        ENDIF.
        rs_returning-type = rs_returning-type &&
              |           { lv_response_name } TYPE { lv_returning_type },\n|.
      ENDLOOP.
    ENDLOOP.
    IF rs_returning-type IS NOT INITIAL.
      rs_returning-type =
        |  TYPES: BEGIN OF { lv_typename },\n| &&
        |{ rs_returning-type }| &&
        |         END OF { lv_typename }.\n|.
    ENDIF.

    LOOP AT is_operation-responses INTO ls_response.
      LOOP AT ls_response-content INTO ls_content.
        rs_returning-abap = rs_returning-abap &&
          |\n    RETURNING\n      VALUE(return) TYPE { lv_typename }|.
        RETURN. " exit method, as only one return parameter is allowed
      ENDLOOP.
    ENDLOOP.
  ENDMETHOD.


  METHOD find_schema.
    DATA lv_name TYPE string.

    lv_name = iv_name.

    REPLACE FIRST OCCURRENCE OF '#/components/schemas/' IN lv_name WITH ''.
    READ TABLE ms_specification-components-schemas
      INTO rs_schema WITH KEY name = lv_name.             "#EC CI_SUBRC
  ENDMETHOD.


  METHOD run.
    DATA lo_parser     TYPE REF TO zcl_oapi_parser.
    DATA lo_references TYPE REF TO zcl_oapi_references.

    ms_input = is_input.

    CREATE OBJECT lo_parser.
    ms_specification = lo_parser->parse( is_input-openapi_json ).

    CREATE OBJECT lo_references.
    ms_specification = lo_references->normalize( ms_specification ).

    rs_result-clas_icf_serv = build_clas_icf_serv( ).
    rs_result-clas_icf_impl = build_clas_icf_impl( ).
    rs_result-clas_client = build_clas_client( ).
    rs_result-intf = build_intf( ).
  ENDMETHOD.
ENDCLASS.
